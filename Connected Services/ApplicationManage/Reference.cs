//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApplicationManage
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/ApplicationManagement", ConfigurationName="ApplicationManage.ApplicationManagement_Port")]
    public interface ApplicationManagement_Port
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/ApplicationManagement:ApplyForJob", ReplyAction="*")]
        ApplicationManage.ApplyForJob_Result ApplyForJob(ApplicationManage.ApplyForJob request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/ApplicationManagement:ApplyForJob", ReplyAction="*")]
        System.Threading.Tasks.Task<ApplicationManage.ApplyForJob_Result> ApplyForJobAsync(ApplicationManage.ApplyForJob request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ApplyForJob
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ApplyForJob", Namespace="urn:microsoft-dynamics-schemas/codeunit/ApplicationManagement", Order=0)]
        public ApplicationManage.ApplyForJobBody Body;
        
        public ApplyForJob()
        {
        }
        
        public ApplyForJob(ApplicationManage.ApplyForJobBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/ApplicationManagement")]
    public partial class ApplyForJobBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public int jobId;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int candidateId;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string coverLetter;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string resumePath;
        
        public ApplyForJobBody()
        {
        }
        
        public ApplyForJobBody(int jobId, int candidateId, string coverLetter, string resumePath)
        {
            this.jobId = jobId;
            this.candidateId = candidateId;
            this.coverLetter = coverLetter;
            this.resumePath = resumePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ApplyForJob_Result
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ApplyForJob_Result", Namespace="urn:microsoft-dynamics-schemas/codeunit/ApplicationManagement", Order=0)]
        public ApplicationManage.ApplyForJob_ResultBody Body;
        
        public ApplyForJob_Result()
        {
        }
        
        public ApplyForJob_Result(ApplicationManage.ApplyForJob_ResultBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/ApplicationManagement")]
    public partial class ApplyForJob_ResultBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool return_value;
        
        public ApplyForJob_ResultBody()
        {
        }
        
        public ApplyForJob_ResultBody(bool return_value)
        {
            this.return_value = return_value;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface ApplicationManagement_PortChannel : ApplicationManage.ApplicationManagement_Port, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class ApplicationManagement_PortClient : System.ServiceModel.ClientBase<ApplicationManage.ApplicationManagement_Port>, ApplicationManage.ApplicationManagement_Port
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ApplicationManagement_PortClient() : 
                base(ApplicationManagement_PortClient.GetDefaultBinding(), ApplicationManagement_PortClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.ApplicationManagement_Port.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationManagement_PortClient(EndpointConfiguration endpointConfiguration) : 
                base(ApplicationManagement_PortClient.GetBindingForEndpoint(endpointConfiguration), ApplicationManagement_PortClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationManagement_PortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ApplicationManagement_PortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationManagement_PortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ApplicationManagement_PortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationManagement_PortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ApplicationManage.ApplyForJob_Result ApplyForJob(ApplicationManage.ApplyForJob request)
        {
            return base.Channel.ApplyForJob(request);
        }
        
        public System.Threading.Tasks.Task<ApplicationManage.ApplyForJob_Result> ApplyForJobAsync(ApplicationManage.ApplyForJob request)
        {
            return base.Channel.ApplyForJobAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ApplicationManagement_Port))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ApplicationManagement_Port))
            {
                return new System.ServiceModel.EndpointAddress("http://desktop-svcm95d:7047/BC252/WS/CRONUS International Ltd./Codeunit/Applicati" +
                        "onManagement?wsdl");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ApplicationManagement_PortClient.GetBindingForEndpoint(EndpointConfiguration.ApplicationManagement_Port);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ApplicationManagement_PortClient.GetEndpointAddress(EndpointConfiguration.ApplicationManagement_Port);
        }
        
        public enum EndpointConfiguration
        {
            
            ApplicationManagement_Port,
        }
    }
}
