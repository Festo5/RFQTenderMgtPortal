@model RecruitmentPortal.Models.ViewModels.ImprestItem.ImprestItemRequisitionViewModel
@{
    var colorSettings = Model.ColorSettings;
}

<div class="container py-5">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-4">Imprest/Item Requisitions</h3>

            <div class="card shadow">
                <div class="card-body">
                    <!-- Create New Requisition Button -->
                    <div class="mb-3 text-end">
                        <button id="createNewRequisition" class="btn"
                                style="background-color: @colorSettings.PrimaryColor; border-color: @colorSettings.PrimaryColor; color: white;"
                                data-bs-toggle="modal" data-bs-target="#createRequisitionModal">
                            <i class="fas fa-plus-circle me-2"></i>Create New Requisition
                        </button>
                    </div>

                    <!-- Filter Tabs -->
                    <ul class="nav nav-tabs mb-4" id="requisitionTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="open-tab" data-bs-toggle="tab" data-bs-target="#open"
                                    type="button" role="tab" aria-controls="open" aria-selected="true">
                                Open (@Model.OpenRequisitions.Count)
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="approved-tab" data-bs-toggle="tab" data-bs-target="#approved"
                                    type="button" role="tab" aria-controls="approved" aria-selected="false">
                                Approved (@Model.ApprovedRequisitions.Count)
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="posted-tab" data-bs-toggle="tab" data-bs-target="#posted"
                                    type="button" role="tab" aria-controls="posted" aria-selected="false">
                                Posted (@Model.PostedRequisitions.Count)
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="cancelled-tab" data-bs-toggle="tab" data-bs-target="#cancelled"
                                    type="button" role="tab" aria-controls="cancelled" aria-selected="false">
                                Cancelled (@Model.CancelledRequisitions.Count)
                            </button>
                        </li>
                        
                    </ul>

                    <!-- Tab Content -->
                    <div class="tab-content" id="requisitionTabsContent">
                        <!-- Open Requisitions Tab -->
                        <div class="tab-pane fade show active" id="open" role="tabpanel" aria-labelledby="open-tab">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th class="align-middle">Document No.</th>
                                            <th class="align-middle">Type</th>
                                            <th class="align-middle">Description</th>
                                            <th class="align-middle">Request Date</th>
                                            <th class="align-middle">Department</th>
                                            <th class="align-middle">Project</th>
                                            <th class="text-end align-middle">Total Amount</th>
                                            <th class="text-center align-middle">Documents</th>
                                            <th class="text-center align-middle" style="width: 250px;">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var header in Model.OpenRequisitions)
                                        {
                                            <tr data-system-id="@header.SystemId" data-document-no="@header.No">
                                                <td class="align-middle">@header.No</td>
                                                <td class="align-middle">@header.RequisitionType</td>
                                                <td class="align-middle">@header.Description</td>
                                                <td class="align-middle">@header.RequestDate.ToString("dd MMM yyyy")</td>
                                                <td class="align-middle">@header.DepartmentCode</td>
                                                <td class="align-middle">@header.ProjectCode</td>
                                                <td class="text-end align-middle">@header.TotalAmount.ToString("N2")</td>
                                                <td class="text-center align-middle">
                                                    <span class="badge bg-info document-count" data-document-no="@header.No"
                                                          style="cursor: pointer">@header.DocumentCount</span>
                                                    <button class="btn btn-sm ms-1 upload-document"
                                                            style="background-color: @colorSettings.Tertiary3Color; border-color: @colorSettings.Tertiary3Color; color: white;"
                                                            data-document-no="@header.No" title="Upload Document">
                                                        <i class="fas fa-upload"></i>
                                                    </button>
                                                </td>
                                                <td class="text-center align-middle" style="white-space: nowrap;">
                                                    <div class="d-flex justify-content-center">
                                                        <button class="btn btn-sm view-details"
                                                                style="background-color: @colorSettings.SecondaryColor; border-color: @colorSettings.SecondaryColor; color: white;"
                                                                data-document-no="@header.No">
                                                            <i class="fas fa-eye me-1"></i>View
                                                        </button>
                                                        <button class="btn btn-sm edit-requisition ms-1"
                                                                style="background-color: @colorSettings.Tertiary1Color; border-color: @colorSettings.Tertiary1Color; color: white;"
                                                                data-document-no="@header.No">
                                                            <i class="fas fa-edit me-1"></i>Edit
                                                        </button>
                                                        <button class="btn btn-sm cancel-requisition ms-1"
                                                                style="background-color: @colorSettings.Tertiary3Color; border-color: @colorSettings.Tertiary3Color; color: white;"
                                                                data-document-no="@header.No">
                                                            <i class="fas fa-times-circle me-1"></i>Cancel
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Approved Requisitions Tab -->
                        <div class="tab-pane fade" id="approved" role="tabpanel" aria-labelledby="approved-tab">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th class="align-middle">Document No.</th>
                                            <th class="align-middle">Type</th>
                                            <th class="align-middle">Description</th>
                                            <th class="align-middle">Request Date</th>
                                            <th class="align-middle">Posting Date</th>
                                            <th class="align-middle">Department</th>
                                            <th class="align-middle">Project</th>
                                            <th class="text-end align-middle">Total Amount</th>
                                            <th class="text-center align-middle">Status</th>
                                            <th class="text-center align-middle">Documents</th>
                                            <th class="text-center align-middle">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var header in Model.ApprovedRequisitions)
                                        {
                                            <tr data-system-id="@header.SystemId" data-document-no="@header.No">
                                                <td class="align-middle">@header.No</td>
                                                <td class="align-middle">@header.RequisitionType</td>
                                                <td class="align-middle">@header.Description</td>
                                                <td class="align-middle">@header.RequestDate.ToString("dd MMM yyyy")</td>
                                                <td class="align-middle">@header.PostingDate.ToString("dd MMM yyyy")</td>
                                                <td class="align-middle">@header.DepartmentCode</td>
                                                <td class="align-middle">@header.ProjectCode</td>
                                                <td class="text-end align-middle">@header.TotalAmount.ToString("N2")</td>
                                                <td class="text-center align-middle">
                                                    <span class="badge" style="background-color: @colorSettings.Tertiary1Color">@header.Status</span>
                                                </td>
                                                <td class="text-center align-middle">
                                                    <span class="badge bg-info document-count" data-document-no="@header.No"
                                                          style="cursor: pointer">@header.DocumentCount</span>
                                                </td>
                                                <td class="text-center align-middle">
                                                    <button class="btn btn-sm view-details"
                                                            style="background-color: @colorSettings.SecondaryColor; border-color: @colorSettings.SecondaryColor; color: white;"
                                                            data-document-no="@header.No">
                                                        <i class="fas fa-eye me-1"></i>View
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Posted Requisitions Tab -->
                        <div class="tab-pane fade" id="posted" role="tabpanel" aria-labelledby="posted-tab">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th class="align-middle">Document No.</th>
                                            <th class="align-middle">Type</th>
                                            <th class="align-middle">Description</th>
                                            <th class="align-middle">Request Date</th>
                                            <th class="align-middle">Posting Date</th>
                                            <th class="align-middle">Department</th>
                                            <th class="align-middle">Project</th>
                                            <th class="text-end align-middle">Total Amount</th>
                                            <th class="text-center align-middle">Status</th>
                                            <th class="text-center align-middle">Documents</th>
                                            <th class="text-center align-middle">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var header in Model.PostedRequisitions)
                                        {
                                            <tr data-system-id="@header.SystemId" data-document-no="@header.No">
                                                <td class="align-middle">@header.No</td>
                                                <td class="align-middle">@header.RequisitionType</td>
                                                <td class="align-middle">@header.Description</td>
                                                <td class="align-middle">@header.RequestDate.ToString("dd MMM yyyy")</td>
                                                <td class="align-middle">@header.PostingDate.ToString("dd MMM yyyy")</td>
                                                <td class="align-middle">@header.DepartmentCode</td>
                                                <td class="align-middle">@header.ProjectCode</td>
                                                <td class="text-end align-middle">@header.TotalAmount.ToString("N2")</td>
                                                <td class="text-center align-middle">
                                                    <span class="badge" style="background-color: @colorSettings.Tertiary1Color">@header.Status</span>
                                                </td>
                                                <td class="text-center align-middle">
                                                    <span class="badge bg-info document-count" data-document-no="@header.No"
                                                          style="cursor: pointer">@header.DocumentCount</span>
                                                </td>
                                                <td class="text-center align-middle">
                                                    <button class="btn btn-sm view-details"
                                                            style="background-color: @colorSettings.SecondaryColor; border-color: @colorSettings.SecondaryColor; color: white;"
                                                            data-document-no="@header.No">
                                                        <i class="fas fa-eye me-1"></i>View
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Cancelled Requisitions Tab -->
                        <div class="tab-pane fade" id="cancelled" role="tabpanel" aria-labelledby="cancelled-tab">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th class="align-middle">Document No.</th>
                                            <th class="align-middle">Type</th>
                                            <th class="align-middle">Description</th>
                                            <th class="align-middle">Request Date</th>
                                            <th class="align-middle">Posting Date</th>
                                            <th class="align-middle">Department</th>
                                            <th class="align-middle">Project</th>
                                            <th class="text-end align-middle">Total Amount</th>
                                            <th class="text-center align-middle">Status</th>
                                            <th class="text-center align-middle">Documents</th>
                                            <th class="text-center align-middle">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var header in Model.CancelledRequisitions)
                                        {
                                            <tr data-system-id="@header.SystemId" data-document-no="@header.No">
                                                <td class="align-middle">@header.No</td>
                                                <td class="align-middle">@header.RequisitionType</td>
                                                <td class="align-middle">@header.Description</td>
                                                <td class="align-middle">@header.RequestDate.ToString("dd MMM yyyy")</td>
                                                <td class="align-middle">@header.PostingDate.ToString("dd MMM yyyy")</td>
                                                <td class="align-middle">@header.DepartmentCode</td>
                                                <td class="align-middle">@header.ProjectCode</td>
                                                <td class="text-end align-middle">@header.TotalAmount.ToString("N2")</td>
                                                <td class="text-center align-middle">
                                                    <span class="badge" style="background-color: #dc3545">@header.Status</span>
                                                </td>
                                                <td class="text-center align-middle">
                                                    <span class="badge bg-info document-count" data-document-no="@header.No"
                                                          style="cursor: pointer">@header.DocumentCount</span>
                                                </td>
                                                <td class="text-center align-middle">
                                                    <button class="btn btn-sm view-details"
                                                            style="background-color: @colorSettings.SecondaryColor; border-color: @colorSettings.SecondaryColor; color: white;"
                                                            data-document-no="@header.No">
                                                        <i class="fas fa-eye me-1"></i>View
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Requisition Modal -->
<div class="modal fade" id="createRequisitionModal" tabindex="-1" aria-labelledby="createRequisitionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header" style="background-color: @colorSettings.PrimaryColor; color: white;">
                <h5 class="modal-title" id="createRequisitionModalLabel">Create New Requisition</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createRequisitionForm" onsubmit="submitRequisitionForm(event)">
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label asp-for="CreateModel.RequisitionType" class="form-label">Requisition Type</label>
                            <select asp-for="CreateModel.RequisitionType" class="form-select" required>
                                <option value="">-- Select Type --</option>
                                <option value="Imprest">Imprest</option>
                                <option value="Item">Item</option>
                            </select>
                            <span asp-validation-for="CreateModel.RequisitionType" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="CreateModel.PostingDate" class="form-label">Posting Date</label>
                            <input asp-for="CreateModel.PostingDate" type="date" class="form-control" required />
                            <span asp-validation-for="CreateModel.PostingDate" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label asp-for="CreateModel.DepartmentCode" class="form-label">Department (Dimension 1)</label>
                            <select asp-for="CreateModel.DepartmentCode" class="form-select">
                                <option value="">-- Select Department --</option>
                                @foreach (var dimension in Model.Dimension1List)
                                {
                                    <option value="@dimension.Code">@dimension.Name</option>
                                }
                            </select>
                            <span asp-validation-for="CreateModel.DepartmentCode" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="CreateModel.ProjectCode" class="form-label">Project (Dimension 2)</label>
                            <select asp-for="CreateModel.ProjectCode" class="form-select">
                                <option value="">-- Select Project --</option>
                                @foreach (var dimension in Model.Dimension2List)
                                {
                                    <option value="@dimension.Code">@dimension.Name</option>
                                }
                            </select>
                            <span asp-validation-for="CreateModel.ProjectCode" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="CreateModel.Description" class="form-label">Description</label>
                        <textarea asp-for="CreateModel.Description" class="form-control" rows="2" required></textarea>
                        <span asp-validation-for="CreateModel.Description" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6>Requisition Lines</h6>
                            <button type="button" class="btn btn-sm add-line"
                                    style="background-color: @colorSettings.Tertiary1Color; border-color: @colorSettings.Tertiary1Color; color: white;">
                                <i class="fas fa-plus me-1"></i>Add Line
                            </button>
                        </div>

                        <div class="table-responsive mt-2">
                            <table class="table table-sm" id="requisitionLinesTable">
                                <thead>
                                    <tr>
                                        <th>Type</th>
                                        <th>Item/Account</th>
                                        <th>Description</th>
                                        <th>Quantity</th>
                                        <th>Unit Cost</th>
                                        <th>UOM</th>
                                        <th>Location</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="requisitionLinesBody">
                                    <!-- Lines will be added dynamically -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn"
                            style="background-color: @colorSettings.SecondaryColor; border-color: @colorSettings.SecondaryColor; color: white;"
                            data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="submit" class="btn"
                            style="background-color: @colorSettings.PrimaryColor; border-color: @colorSettings.PrimaryColor; color: white;">
                        <i class="fas fa-save me-1"></i>Submit Requisition
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Requisition Modal -->
<div class="modal fade" id="editRequisitionModal" tabindex="-1" aria-labelledby="editRequisitionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header" style="background-color: @colorSettings.PrimaryColor; color: white;">
                <h5 class="modal-title" id="editRequisitionModalLabel">Edit Requisition</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editRequisitionForm" onsubmit="submitEditRequisitionForm(event)">
                <div class="modal-body">
                    <input type="hidden" id="editDocumentNo" name="DocumentNo" />

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Requisition Type</label>
                            <select id="editRequisitionType" class="form-select" required>
                                <option value="">-- Select Type --</option>
                                <option value="Imprest">Imprest</option>
                                <option value="Item">Item</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Posting Date</label>
                            <input type="date" id="editPostingDate" class="form-control" required />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Department (Dimension 1)</label>
                            <select id="editDepartmentCode" class="form-select">
                                <option value="">-- Select Department --</option>
                                @foreach (var dimension in Model.Dimension1List)
                                {
                                    <option value="@dimension.Code">@dimension.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Project (Dimension 2)</label>
                            <select id="editProjectCode" class="form-select">
                                <option value="">-- Select Project --</option>
                                @foreach (var dimension in Model.Dimension2List)
                                {
                                    <option value="@dimension.Code">@dimension.Name</option>
                                }
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea id="editDescription" class="form-control" rows="2" required></textarea>
                    </div>

                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6>Requisition Lines</h6>
                            <button type="button" class="btn btn-sm add-edit-line"
                                    style="background-color: @colorSettings.Tertiary1Color; border-color: @colorSettings.Tertiary1Color; color: white;">
                                <i class="fas fa-plus me-1"></i>Add Line
                            </button>
                        </div>

                        <div class="table-responsive mt-2">
                            <table class="table table-sm" id="editRequisitionLinesTable">
                                <thead>
                                    <tr>
                                        <th>Type</th>
                                        <th>Item/Account</th>
                                        <th>Description</th>
                                        <th>Quantity</th>
                                        <th>Unit Cost</th>
                                        <th>UOM</th>
                                        <th>Location</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="editRequisitionLinesBody">
                                    <!-- Lines will be populated dynamically -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn"
                            style="background-color: @colorSettings.SecondaryColor; border-color: @colorSettings.SecondaryColor; color: white;"
                            data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="submit" class="btn"
                            style="background-color: @colorSettings.PrimaryColor; border-color: @colorSettings.PrimaryColor; color: white;">
                        <i class="fas fa-save me-1"></i>Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View Details Modal -->
<div class="modal fade" id="viewDetailsModal" tabindex="-1" aria-labelledby="viewDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header" style="background-color: @colorSettings.PrimaryColor; color: white;">
                <h5 class="modal-title" id="viewDetailsModalLabel">Requisition Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-4">
                    <div class="col-md-4">
                        <h6 class="text-muted">Document No.</h6>
                        <p id="detailDocumentNo" class="fw-bold">-</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="text-muted">Type</h6>
                        <p id="detailType" class="fw-bold">-</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="text-muted">Status</h6>
                        <p id="detailStatus" class="fw-bold">-</p>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-4">
                        <h6 class="text-muted">Request Date</h6>
                        <p id="detailRequestDate" class="fw-bold">-</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="text-muted">Posting Date</h6>
                        <p id="detailPostingDate" class="fw-bold">-</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="text-muted">Requestor</h6>
                        <p id="detailRequestor" class="fw-bold">-</p>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-4">
                        <h6 class="text-muted">Department</h6>
                        <p id="detailDepartment" class="fw-bold">-</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="text-muted">Project</h6>
                        <p id="detailProject" class="fw-bold">-</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="text-muted">Total Amount</h6>
                        <p id="detailTotalAmount" class="fw-bold">-</p>
                    </div>
                </div>

                <div class="mb-4">
                    <h6 class="text-muted">Description</h6>
                    <p id="detailDescription" class="fw-bold">-</p>
                </div>

                <h5 class="mb-3">Requisition Lines</h5>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Line No.</th>
                                <th>Type</th>
                                <th>No.</th>
                                <th>Description</th>
                                <th class="text-end">Quantity</th>
                                <th class="text-end">Unit Cost</th>
                                <th class="text-end">Amount</th>
                                <th>UOM</th>
                                <th>Location</th>
                                <th>Bin</th>
                            </tr>
                        </thead>
                        <tbody id="detailLinesBody">
                            <!-- Lines will be populated dynamically -->
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="6" class="text-end fw-bold">Total Amount:</td>
                                <td class="text-end fw-bold" id="detailTotalAmountFooter">0.00</td>
                                <td colspan="3"></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn"
                        style="background-color: @colorSettings.SecondaryColor; border-color: @colorSettings.SecondaryColor; color: white;"
                        data-bs-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Documents Modal -->
<div class="modal fade" id="documentsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header" style="background-color: @colorSettings.PrimaryColor; color: white;">
                <h5 class="modal-title">Documents</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>File Name</th>
                                <th>Type</th>
                                <th>Uploaded Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="documentsListBody">
                            <!-- Documents will be populated dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Button Styles */
        .btn-primary {
            background-color: @colorSettings.PrimaryColor;
            border-color: @colorSettings.PrimaryColor;
            color: white;
        }

            .btn-primary:hover {
                background-color: @colorSettings.PrimaryColor;
                border-color: @colorSettings.PrimaryColor;
                opacity: 0.9;
            }

        .btn-secondary {
            background-color: @colorSettings.SecondaryColor;
            border-color: @colorSettings.SecondaryColor;
            color: white;
        }

            .btn-secondary:hover {
                background-color: @colorSettings.SecondaryColor;
                border-color: @colorSettings.SecondaryColor;
                opacity: 0.9;
            }

        .btn-success {
            background-color: @colorSettings.Tertiary1Color;
            border-color: @colorSettings.Tertiary1Color;
            color: white;
        }

            .btn-success:hover {
                background-color: @colorSettings.Tertiary1Color;
                border-color: @colorSettings.Tertiary1Color;
                opacity: 0.9;
            }

        /* Badge Styles */
        .badge.bg-success {
            background-color: @colorSettings.Tertiary1Color !important;
            color: white;
        }

        .badge.bg-warning {
            background-color: @colorSettings.Tertiary2Color !important;
            color: white !important;
        }

        .badge.bg-danger {
            background-color: #dc3545 !important;
            color: white !important;
        }

        .badge.bg-info {
            background-color: @colorSettings.Tertiary3Color !important;
            color: white !important;
        }

        .document-count:hover {
            opacity: 0.8;
        }

        /* Tab Navigation */
        .nav-tabs .nav-link.active {
            color: @colorSettings.PrimaryColor;
            border-bottom-color: @colorSettings.PrimaryColor;
        }

        .nav-tabs .nav-link:hover:not(.active) {
            color: @colorSettings.PrimaryColor;
        }

        /* Table Hover */
        .table-hover tbody tr:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        /* Modal Header */
        .modal-header {
            padding: 1rem 1.5rem;
        }

        /* Other Styles */
        .requisition-line-input {
            max-width: 100px;
        }

        .action-buttons .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }

        /* Loading spinner for select elements */
        .select-loading {
            position: relative;
        }

            .select-loading:after {
                content: " ";
                position: absolute;
                right: 10px;
                top: 50%;
                margin-top: -8px;
                width: 16px;
                height: 16px;
                border: 2px solid #ccc;
                border-top-color: @colorSettings.PrimaryColor;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }

        @@keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize tooltips
            $('[title]').tooltip();

            // Line counter for new requisition
            let lineCounter = 0;                       

            // Document count click handler - shows documents modal
            $(document).on('click', '.document-count', function() {
                const documentNo = $(this).data('document-no');
                loadDocuments(documentNo);
            });

            // Upload document button handler
            $(document).on('click', '.upload-document', function() {
                const documentNo = $(this).data('document-no');
                window.location.href = `/ImprestItemRequisition/UploadDocument?documentNo=${documentNo}`;
            });

            function loadDocuments(documentNo) {
                $.get(`/ImprestItemRequisition/GetDocuments?requisitionNo=${documentNo}`, function(response) {
                    if (response.success) {
                        // Clear previous content
                        $('#documentsListBody').empty();

                        // Populate documents
                        if (response.documents && response.documents.length > 0) {
                            response.documents.forEach(function(doc) {
                                const uploadedDate = new Date(doc.uploadedDate);
                                const formattedDate = uploadedDate.toLocaleDateString() + ' ' + uploadedDate.toLocaleTimeString();

                                $('#documentsListBody').append(`
                                    <tr>
                                        <td>${doc.fileName}.${doc.fileExtension}</td>
                                        <td>${doc.documentType || 'Other'}</td>
                                        <td>${formattedDate}</td>
                                        <td>
                                            <a href="/ImprestItemRequisition/DownloadDocument?documentId=${doc.systemId}"
                                               class="btn btn-sm btn-primary" title="Download">
                                                <i class="fas fa-download"></i>
                                            </a>
                                            ${response.isOpen ? `
                                            <button class="btn btn-sm btn-danger delete-document ms-1"
                                                    data-document-id="${doc.systemId}"
                                                    data-requisition-no="${documentNo}"
                                                    title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                            ` : ''}
                                        </td>
                                    </tr>
                                `);
                            });
                        } else {
                            $('#documentsListBody').append(`
                                <tr>
                                    <td colspan="4" class="text-center">No documents found</td>
                                </tr>
                            `);
                        }

                        // Update modal title
                        $('#documentsModal .modal-title').text(`Documents for Requisition ${documentNo}`);

                        // Show modal
                        $('#documentsModal').modal('show');
                    } else {
                        alert(response.message || 'Error loading documents');
                    }
                }).fail(function(xhr) {
                    console.error('Error loading documents:', xhr.responseText);
                    alert('Failed to load documents. Please try again. ' +
                          (xhr.responseJSON?.message || xhr.statusText));
                });
            }

            // Handle document deletion from documents modal
            $(document).on('click', '.delete-document', function() {
                const documentId = $(this).data('document-id');
                const requisitionNo = $(this).data('requisition-no');
                const row = $(this).closest('tr');

                if (confirm('Are you sure you want to delete this document?')) {
                    $.post('/ImprestItemRequisition/DeleteDocument', {
                        documentId: documentId,
                        requisitionNo: requisitionNo
                    }, function(response) {
                        if (response.success) {
                            row.fadeOut(400, function() {
                                $(this).remove();
                                // Update document count badge
                                $(`.document-count[data-document-no="${requisitionNo}"]`).text(response.newCount);

                                // If no documents left, show empty message
                                if ($('#documentsListBody tr').length === 0) {
                                    $('#documentsListBody').append(`
                                        <tr>
                                            <td colspan="4" class="text-center">No documents found</td>
                                        </tr>
                                    `);
                                }
                            });
                        } else {
                            alert('Error: ' + response.message);
                        }
                    }).fail(function() {
                        alert('Error deleting document. Please try again.');
                    });
                }
            });

            // Add line to new requisition
            $('.add-line').on('click', function() {
                lineCounter++;
                const newLine = `
                    <tr data-line-id="${lineCounter}">
                        <td>
                            <select name="CreateModel.Lines[${lineCounter}].Type" class="form-select form-select-sm line-type" required>
                                <option value="">-- Select Type --</option>
                                <option value="Item">Item</option>
                                <option value="G/L Account">G/L Account</option>
                            </select>
                        </td>
                        <td>
                            <select name="CreateModel.Lines[${lineCounter}].No" class="form-select form-select-sm line-item-select" required>
                                <option value="">-- Select Type First --</option>
                            </select>
                        </td>
                        <td>
                            <input type="text" name="CreateModel.Lines[${lineCounter}].Description" class="form-control form-control-sm line-description" />
                        </td>
                        <td>
                            <input type="number" name="CreateModel.Lines[${lineCounter}].Quantity" class="form-control form-control-sm requisition-line-input line-quantity"
                                   min="0.01" step="0.01" value="1.00" required />
                        </td>
                        <td>
                            <input type="number" name="CreateModel.Lines[${lineCounter}].UnitCost" class="form-control form-control-sm requisition-line-input line-unit-cost"
                                   min="0" step="0.01" value="0.00" required />
                        </td>
                        <td>
                            <input type="text" name="CreateModel.Lines[${lineCounter}].UnitOfMeasure" class="form-control form-control-sm line-uom" readonly />
                        </td>
                        <td>
                            <input type="text" name="CreateModel.Lines[${lineCounter}].LocationCode" class="form-control form-control-sm" />
                        </td>
                        <td>
                            <button type="button" class="btn btn-sm btn-danger remove-line">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>
                    </tr>
                `;
                $('#requisitionLinesBody').append(newLine);
            });

            // Handle line type change
            $(document).on('change', '.line-type', function() {
                const lineType = $(this).val();
                const tr = $(this).closest('tr');
                const itemSelect = tr.find('.line-item-select');
                const descriptionInput = tr.find('.line-description');
                const unitCostInput = tr.find('.line-unit-cost');
                const uomInput = tr.find('.line-uom');

                // Clear previous values and show loading
                itemSelect.empty()
                    .prop('disabled', true)
                    .addClass('select-loading')
                    .append('<option value="">Loading...</option>');

                descriptionInput.val('');
                unitCostInput.val('0.00');
                uomInput.val('');

                if (lineType === 'Item') {
                    // Fetch items from server
                    $.get('/ImprestItemRequisition/GetItems', function(items) {
                        itemSelect.empty().removeClass('select-loading');
                        itemSelect.append('<option value="">-- Select Item --</option>');
                        items.forEach(function(item) {
                            itemSelect.append(
                                `<option value="${item.no}"
                                  data-description="${item.description}"
                                  data-uom="${item.unitOfMeasure}"
                                  data-unit-cost="${item.unitCost}">
                                  ${item.description} (${item.no})
                                </option>`
                            );
                        });
                        itemSelect.prop('disabled', false);

                        // If this is an edit line with existing value, set it
                        const existingNo = tr.find('.line-item-select').data('existing-value');
                        if (existingNo) {
                            itemSelect.val(existingNo);
                            tr.find('.line-item-select').removeData('existing-value');
                        }
                    }).fail(function() {
                        itemSelect.empty().removeClass('select-loading')
                            .append('<option value="">Error loading items</option>');
                    });
                } else if (lineType === 'G/L Account') {
                    // Fetch GL accounts from server
                    $.get('/ImprestItemRequisition/GetGLAccounts', function(accounts) {
                        itemSelect.empty().removeClass('select-loading');
                        itemSelect.append('<option value="">-- Select G/L Account --</option>');
                        accounts.forEach(function(account) {
                            itemSelect.append(
                                `<option value="${account.no}"
                                  data-description="${account.name}">
                                  ${account.name} (${account.no})
                                </option>`
                            );
                        });
                        itemSelect.prop('disabled', false);

                        // If this is an edit line with existing value, set it
                        const existingNo = tr.find('.line-item-select').data('existing-value');
                        if (existingNo) {
                            itemSelect.val(existingNo);
                            tr.find('.line-item-select').removeData('existing-value');
                        }
                    }).fail(function() {
                        itemSelect.empty().removeClass('select-loading')
                            .append('<option value="">Error loading accounts</option>');
                    });
                }
            });

            // Handle item/account selection change
            $(document).on('change', '.line-item-select', function() {
                const selectedOption = $(this).find('option:selected');
                const tr = $(this).closest('tr');

                // Update description
                tr.find('.line-description').val(selectedOption.data('description') || '');

                // For items, update UOM and unit cost
                if (tr.find('.line-type').val() === 'Item') {
                    tr.find('.line-uom').val(selectedOption.data('uom') || '');
                    tr.find('.line-unit-cost').val(selectedOption.data('unit-cost') || '0.00');
                } else {
                    tr.find('.line-uom').val('');
                    tr.find('.line-unit-cost').val('0.00');
                }
            });

            // Calculate amount when quantity or unit cost changes
            $(document).on('change', '.line-quantity, .line-unit-cost', function() {
                const tr = $(this).closest('tr');
                const quantity = parseFloat(tr.find('.line-quantity').val()) || 0;
                const unitCost = parseFloat(tr.find('.line-unit-cost').val()) || 0;
                // You can display the calculated amount if needed
                // const amount = quantity * unitCost;
            });

            // Remove line from new requisition
            $(document).on('click', '.remove-line', function() {
                $(this).closest('tr').remove();
            });

            // View details button handler
            $(document).on('click', '.view-details', function() {
                const documentNo = $(this).data('document-no');
                loadRequisitionDetails(documentNo);
            });

            // Edit button handler
            $(document).on('click', '.edit-requisition', function() {
                const documentNo = $(this).data('document-no');
                loadRequisitionForEdit(documentNo);
            });

            // Cancel requisition button handler
            $(document).on('click', '.cancel-requisition', function() {
                const documentNo = $(this).data('document-no');
                if (confirm(`Are you sure you want to cancel requisition ${documentNo}?`)) {
                    cancelRequisition(documentNo);
                }
            });

            // Add line to edit requisition
            $(document).on('click', '.add-edit-line', function() {
                const lineCounter = $('#editRequisitionLinesBody tr').length + 1;
                const newLine = createEditLineHtml(lineCounter);
                $('#editRequisitionLinesBody').append(newLine);
            });
        });

        function loadRequisitionForEdit(documentNo) {
            $.get(`/ImprestItemRequisition/Details?documentNo=${documentNo}`, function(response) {
                if (response.success && response.header) {
                    // Set header values
                    $('#editDocumentNo').val(response.header.no);
                    $('#editRequisitionType').val(response.header.requisitionType);
                    $('#editPostingDate').val(response.header.postingDate.split('T')[0]);
                    $('#editDepartmentCode').val(response.header.departmentCode || '');
                    $('#editProjectCode').val(response.header.projectCode || '');
                    $('#editDescription').val(response.header.description || '');

                    // Clear and populate lines
                    $('#editRequisitionLinesBody').empty();
                    let lineCounter = 0;

                    if (response.lines && response.lines.length > 0) {
                        response.lines.forEach(function(line) {
                            lineCounter++;
                            const newLine = createEditLineHtml(lineCounter, line);
                            $('#editRequisitionLinesBody').append(newLine);

                            // Set line values
                            const lineRow = $(`#editRequisitionLinesBody tr[data-line-id="${lineCounter}"]`);
                            lineRow.find('.line-type').val(line.type);

                            // Store the existing value to be set after items load
                            lineRow.find('.line-item-select').data('existing-value', line.no);

                            // Trigger change event to load appropriate items/accounts
                            lineRow.find('.line-type').trigger('change');

                            // Set other values immediately
                            lineRow.find('.line-description').val(line.description);
                            lineRow.find('.line-quantity').val(line.quantity);
                            lineRow.find('.line-unit-cost').val(line.unitCost);
                            lineRow.find('.line-uom').val(line.unitOfMeasure);
                            lineRow.find('.line-location').val(line.locationCode);
                        });
                    }

                    $('#editRequisitionModal').modal('show');
                } else {
                    alert(response.message || 'Error loading requisition for editing');
                }
            });
        }

        function createEditLineHtml(lineId, lineData = null) {
            const line = lineData || {};
            return `
                <tr data-line-id="${lineId}">
                    <td>
                        <select name="Lines[${lineId}].Type" class="form-select form-select-sm line-type" required>
                            <option value="">-- Select Type --</option>
                            <option value="Item" ${line.type === 'Item' ? 'selected' : ''}>Item</option>
                            <option value="G/L Account" ${line.type === 'G/L Account' ? 'selected' : ''}>G/L Account</option>
                        </select>
                    </td>
                    <td>
                        <select name="Lines[${lineId}].No" class="form-select form-select-sm line-item-select" required
                            ${line.type ? '' : 'disabled'}>
                            <option value="">${line.type ? 'Loading...' : '-- Select Type First --'}</option>
                            ${line.no ? `<option value="${line.no}" selected>${line.description || line.no}</option>` : ''}
                        </select>
                    </td>
                    <td>
                        <input type="text" name="Lines[${lineId}].Description" class="form-control form-control-sm line-description"
                               value="${line.description || ''}" />
                    </td>
                    <td>
                        <input type="number" name="Lines[${lineId}].Quantity" class="form-control form-control-sm requisition-line-input line-quantity"
                               min="0.01" step="0.01" value="${line.quantity || '1.00'}" required />
                    </td>
                    <td>
                        <input type="number" name="Lines[${lineId}].UnitCost" class="form-control form-control-sm requisition-line-input line-unit-cost"
                               min="0" step="0.01" value="${line.unitCost || '0.00'}" required />
                    </td>
                    <td>
                        <input type="text" name="Lines[${lineId}].UnitOfMeasure" class="form-control form-control-sm line-uom"
                               value="${line.unitOfMeasure || ''}" readonly />
                    </td>
                    <td>
                        <input type="text" name="Lines[${lineId}].LocationCode" class="form-control form-control-sm line-location"
                               value="${line.locationCode || ''}" />
                    </td>
                    <td>
                        <button type="button" class="btn btn-sm btn-danger remove-line">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </td>
                </tr>
            `;
        }

        function loadRequisitionDetails(documentNo) {
            $.get(`/ImprestItemRequisition/Details?documentNo=${documentNo}`, function(response) {
                if (response.success && response.header) {
                    // Set header details
                    $('#detailDocumentNo').text(response.header.no || '-');
                    $('#detailType').text(response.header.requisitionType || '-');
                    $('#detailStatus').text(response.header.status || '-');
                    $('#detailRequestDate').text(formatDate(response.header.requestDate));
                    $('#detailPostingDate').text(formatDate(response.header.postingDate));
                    $('#detailRequestor').text(response.header.requestorId || '-');
                    $('#detailDepartment').text(response.header.departmentCode || '-');
                    $('#detailProject').text(response.header.projectCode || '-');
                    $('#detailTotalAmount').text((response.header.totalAmount || 0).toFixed(2));
                    $('#detailDescription').text(response.header.description || '-');

                    // Clear and populate lines
                    $('#detailLinesBody').empty();
                    let totalAmount = 0;

                    if (response.lines && response.lines.length > 0) {
                        response.lines.forEach(function(line) {
                            const lineAmount = (line.quantity || 0) * (line.unitCost || 0);
                            totalAmount += lineAmount;

                            $('#detailLinesBody').append(`
                                <tr>
                                    <td>${line.lineNo || '-'}</td>
                                    <td>${line.type || '-'}</td>
                                    <td>${line.no || '-'}</td>
                                    <td>${line.description || '-'}</td>
                                    <td class="text-end">${(line.quantity || 0).toFixed(2)}</td>
                                    <td class="text-end">${(line.unitCost || 0).toFixed(2)}</td>
                                    <td class="text-end">${lineAmount.toFixed(2)}</td>
                                    <td>${line.unitOfMeasure || '-'}</td>
                                    <td>${line.locationCode || '-'}</td>
                                    <td>${line.binCode || '-'}</td>
                                </tr>
                            `);
                        });
                    }

                    $('#detailTotalAmountFooter').text(totalAmount.toFixed(2));
                    $('#viewDetailsModal').modal('show');
                } else {
                    alert(response.message || 'Error loading requisition details');
                }
            }).fail(function(xhr) {
                try {
                    const errorResponse = JSON.parse(xhr.responseText);
                    alert(errorResponse.message || 'Request failed');
                } catch (e) {
                    alert('Error loading requisition details');
                }
            });
        }

        // Helper function to format dates
        function formatDate(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            return isNaN(date.getTime()) ? dateString : date.toLocaleDateString();
        }

        // Cancel requisition
        function cancelRequisition(documentNo) {
            $.post(`/ImprestItemRequisition/Cancel`, { documentNo: documentNo })
            .done(function(response) {
                if (response.success) {
                    alert(`Requisition ${documentNo} cancelled successfully`);
                    location.reload();
                } else {
                    alert(response.message || 'Failed to cancel requisition');
                }
            })
            .fail(function() {
                alert('Error cancelling requisition');
            });
        }

        // Initialize the modal to clear previous data when shown
        $('#createRequisitionModal').on('show.bs.modal', function() {
            $('#requisitionLinesBody').empty();
            lineCounter = 0;
            $('#createRequisitionForm')[0].reset();
        });

        function submitRequisitionForm(event) {
            event.preventDefault();

            // Show loading state
            const submitBtn = $('#createRequisitionModal').find('button[type="submit"]');
            const originalBtnText = submitBtn.html();
            submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>Submitting...');

            // Collect form data
            const requisitionType = $('#CreateModel_RequisitionType').val();
            const description = $('#CreateModel_Description').val();
            const lines = [];
            const departmentCode = $('#CreateModel_DepartmentCode').val();
            const projectCode = $('#CreateModel_ProjectCode').val();

            // Validate we have at least one line
            if ($('#requisitionLinesBody tr').length === 0) {
                alert('Please add at least one requisition line');
                submitBtn.prop('disabled', false).html(originalBtnText);
                return;
            }
            
            // Collect all lines
            $('#requisitionLinesBody tr').each(function() {
                const line = {
                    type: $(this).find('.line-type').val(),
                    no: $(this).find('.line-item-select').val(),
                    description: $(this).find('.line-description').val(),
                    quantity: parseFloat($(this).find('.line-quantity').val()) || 0,
                    unitCost: parseFloat($(this).find('.line-unit-cost').val()) || 0,
                    unitOfMeasure: $(this).find('.line-uom').val(),
                    locationCode: $(this).find('input[name*="LocationCode"]').val(),
                    shortcutDimension1Code: departmentCode,
                    shortcutDimension2Code: projectCode
                };

                if (line.type && line.no) {
                    lines.push(line);
                }
            });

            // Final validation
            if (lines.length === 0) {
                alert('Please complete all line items');
                submitBtn.prop('disabled', false).html(originalBtnText);
                return;
            }

            // Create the complete request object
            const requestData = {
                RequisitionType: requisitionType,
                Description: description,
                Lines: lines
            };

            // Submit via AJAX
            $.ajax({
                url: '/ImprestItemRequisition/Submit',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(requestData),
                success: function(response) {
                    if (response.success) {
                        // Show success message
                        toastr.success(`Requisition ${response.DocumentNo} created successfully`);

                        // Close modal
                        $('#createRequisitionModal').modal('hide');

                        // Refresh the page to show new requisition
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        alert(response.message || 'Failed to submit requisition');
                        submitBtn.prop('disabled', false).html(originalBtnText);
                    }
                },
                error: function(xhr) {
                    let errorMsg = 'Error submitting requisition';
                    try {
                        errorMsg += ': ' + (xhr.responseJSON?.message || xhr.statusText);
                    } catch (e) {
                        errorMsg += '. Please try again.';
                    }
                    alert(errorMsg);
                    submitBtn.prop('disabled', false).html(originalBtnText);
                }
            });
        }

        function loadDocumentCounts() {
            $('.document-count').each(function() {
                const documentNo = $(this).data('document-no');
                const badge = $(this);

                console.log('Loading document count for:', documentNo); // Debug log

                $.ajax({
                    url: '/ImprestItemRequisition/GetDocumentsCount',
                    type: 'GET',
                    data: { requisitionNo: documentNo },
                    success: function(count) {
                        console.log('Received count for', documentNo, ':', count); // Debug log
                        badge.text(count);
                    },
                    error: function(xhr, status, error) {
                        console.error('Error getting document count for', documentNo, ':', error); // Debug log
                        badge.text('0');
                    }
                });
            });
        }

        function submitEditRequisitionForm(event) {
            event.preventDefault();

            const submitBtn = $('#editRequisitionModal').find('button[type="submit"]');
            const originalBtnText = submitBtn.html();
            submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>Saving...');

            const documentNo = $('#editDocumentNo').val();
            const lines = [];

            // Collect all lines
            $('#editRequisitionLinesBody tr').each(function() {
                const line = {
                    type: $(this).find('.line-type').val(),
                    no: $(this).find('.line-item-select').val(),
                    description: $(this).find('.line-description').val(),
                    quantity: parseFloat($(this).find('.line-quantity').val()) || 0,
                    unitCost: parseFloat($(this).find('.line-unit-cost').val()) || 0,
                    unitOfMeasure: $(this).find('.line-uom').val(),
                    locationCode: $(this).find('.line-location').val(),
                    shortcutDimension1Code: $('#editDepartmentCode').val(),
                    shortcutDimension2Code: $('#editProjectCode').val()
                };

                if (line.type && line.no) {
                    lines.push(line);
                }
            });

            // Final validation
            if (lines.length === 0) {
                alert('Please complete all line items');
                submitBtn.prop('disabled', false).html(originalBtnText);
                return;
            }

            const editData = {
                documentNo: documentNo,
                postingDate: $('#editPostingDate').val(),
                description: $('#editDescription').val(),
                departmentCode: $('#editDepartmentCode').val(),
                projectCode: $('#editProjectCode').val(),
                lines: lines
            };

            // Submit via AJAX
            $.ajax({
                url: '/ImprestItemRequisition/Edit',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(editData),
                success: function(response) {
                    if (response.success) {
                        toastr.success(`Requisition ${response.documentNo} updated successfully`);
                        $('#editRequisitionModal').modal('hide');
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        alert(response.message || 'Failed to update requisition');
                        submitBtn.prop('disabled', false).html(originalBtnText);
                    }
                },
                error: function(xhr) {
                    let errorMsg = 'Error updating requisition';
                    try {
                        errorMsg += ': ' + (xhr.responseJSON?.message || xhr.statusText);
                    } catch (e) {
                        errorMsg += '. Please try again.';
                    }
                    alert(errorMsg);
                    submitBtn.prop('disabled', false).html(originalBtnText);
                }
            });
        }

        // Add new requisition to the Open tab
        function addRequisitionToTable(requisition) {
            const openTable = $('#open').find('tbody');
            const newRow = `
                <tr data-system-id="${requisition.systemId}" data-document-no="${requisition.no}">
                    <td class="align-middle">${requisition.no}</td>
                    <td class="align-middle">${requisition.requisitionType}</td>
                    <td class="align-middle">${requisition.description}</td>
                    <td class="align-middle">${new Date(requisition.requestDate).toLocaleDateString()}</td>
                    <td class="align-middle">${new Date(requisition.postingDate).toLocaleDateString()}</td>
                    <td class="align-middle">${requisition.departmentCode || '-'}</td>
                    <td class="align-middle">${requisition.projectCode || '-'}</td>
                    <td class="text-end align-middle">${requisition.totalAmount?.toFixed(2) || '0.00'}</td>
                    <td class="text-center align-middle">
                        <span class="badge" style="background-color: @colorSettings.Tertiary2Color">${requisition.status}</span>
                    </td>
                    <td class="text-center align-middle">
                        <span class="badge bg-info document-count" data-document-no="${requisition.no}"
                              style="cursor: pointer">0</span>
                        <button class="btn btn-sm ms-1 upload-document"
                                style="background-color: @colorSettings.Tertiary3Color; border-color: @colorSettings.Tertiary3Color; color: white;"
                                data-document-no="${requisition.no}" title="Upload Document">
                            <i class="fas fa-upload"></i>
                        </button>
                    </td>
                    <td class="text-center align-middle">
                        <button class="btn btn-sm view-details"
                                style="background-color: @colorSettings.SecondaryColor; border-color: @colorSettings.SecondaryColor; color: white;"
                                data-document-no="${requisition.no}">
                            <i class="fas fa-eye me-1"></i>View
                        </button>
                        <button class="btn btn-sm edit-requisition ms-1"
                                style="background-color: @colorSettings.Tertiary1Color; border-color: @colorSettings.Tertiary1Color; color: white;"
                                data-document-no="${requisition.no}">
                            <i class="fas fa-edit me-1"></i>Edit
                        </button>
                        <button class="btn btn-sm cancel-requisition ms-1"
                                style="background-color: @colorSettings.Tertiary3Color; border-color: @colorSettings.Tertiary3Color; color: white;"
                                data-document-no="${requisition.no}">
                            <i class="fas fa-times-circle me-1"></i>Cancel
                        </button>
                    </td>
                </tr>
            `;

            openTable.prepend(newRow);

            // Update the Open tab count
            const openTab = $('#open-tab');
            const currentCount = parseInt(openTab.text().match(/\((\d+)\)/)[1]) || 0;
            openTab.text(`Open (${currentCount + 1})`);
        }

        loadDocumentCounts();
    </script>
}